(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{432:function(a,t,e){"use strict";e.r(t);var v=e(2),_=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"常用类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用类"}},[a._v("#")]),a._v(" 常用类")]),a._v(" "),t("h3",{attrs:{id:"object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[a._v("#")]),a._v(" Object")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("object（）：构造器，构造一个新的对象")])]),a._v(" "),t("li",[t("p",[a._v("getclass（）：返回此Object的运行时类， 返回的Class对象是被表示类的static synchronized方法锁定的对象")])]),a._v(" "),t("li",[t("p",[a._v("hashCode（）：返回对象的哈希码值")])]),a._v(" "),t("li",[t("p",[a._v("equals（）：指示一些其他对象是否等于此")])]),a._v(" "),t("li",[t("p",[a._v("clone（）：创建并返回此对象的副本，一般对于任何对象x： x.clone() != x, x.clone().getClass() == x.getClass()将是true ，但这些都不是绝对的要求。 通常是： x.clone().equals(x)将是true ，但是这也不是一个绝对的要求。")])]),a._v(" "),t("li",[t("p",[a._v("toString（）：返回对象的字符串表示形式，一般来说应该具有返回的字符串具简明扼要的特点，建议所有子类覆盖此类")])])]),a._v(" "),t("h3",{attrs:{id:"arrays"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[a._v("#")]),a._v(" Arrays")]),a._v(" "),t("ul",[t("li",[a._v("Arrays.toString(x)方法 : 快速"),t("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E8%BE%93%E5%87%BA%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[a._v("输出数组"),t("OutboundLink")],1),a._v("内容")]),a._v(" "),t("li",[a._v("Arrays.sort()方法 : 给数组排序，默认升序")]),a._v(" "),t("li",[a._v("Arrays.equals()方法 : 比较两个数组内容是否相等")]),a._v(" "),t("li",[a._v("Arrays.binarySearch(Datatype[], Datatype key) ：在数组中查找元素")]),a._v(" "),t("li",[a._v("Arrays.copyOf()：第一个参数是原数组，第二个参数是拷贝长度，返回值是将原数组拷贝一份返回")]),a._v(" "),t("li",[a._v("Collections.reverseOrder() : 倒序")])]),a._v(" "),t("h3",{attrs:{id:"number"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[a._v("#")]),a._v(" Number")]),a._v(" "),t("p",[t("code",[a._v("基本数据类型的包装类")])]),a._v(" "),t("ul",[t("li",[a._v("xxxValue() :  以 xxx 形式返回指定的数值。")]),a._v(" "),t("li",[a._v("compareTo() : 方法用于将 Number 对象与方法的参数进行比较；")]),a._v(" "),t("li",[a._v("equals() : equals() 用于判断 Number 对象与方法的参数进是否相等")]),a._v(" "),t("li",[a._v("Intanger .valueOf() : 用于返回给定参数的原生 Number 对象值；用于返回给定参数的原生 Number 对象值；")]),a._v(" "),t("li",[a._v("toString() : 方法用于返回以一个字符串表示的 Number 对象值；")]),a._v(" "),t("li",[a._v("parsexxx():将字符串解析为 xxx类型；")])]),a._v(" "),t("h3",{attrs:{id:"math"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[a._v("#")]),a._v(" Math")]),a._v(" "),t("ul",[t("li",[a._v("abs（）：返回绝对值")]),a._v(" "),t("li",[a._v("addExact（）：返回参数的和")]),a._v(" "),t("li",[a._v("max（）：返回较大的值")]),a._v(" "),t("li",[a._v("min（）：返回较小值")]),a._v(" "),t("li",[a._v("multiplyExact（）：返回参数的乘积")]),a._v(" "),t("li",[a._v("subtraExact（）：返回参数的差")]),a._v(" "),t("li",[a._v("sqrt（）：返回参数的正确舍入的正平方根")])]),a._v(" "),t("blockquote",[t("p",[a._v("Math.")])]),a._v(" "),t("h3",{attrs:{id:"character"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#character"}},[a._v("#")]),a._v(" Character")]),a._v(" "),t("p",[t("code",[a._v("char的包装类")])]),a._v(" "),t("ul",[t("li",[a._v("isLetter()是否是一个字母")]),a._v(" "),t("li",[a._v("isDigit()是否是一个数字字符")]),a._v(" "),t("li",[a._v("isWhitespace()是否是一个空白字符")]),a._v(" "),t("li",[a._v("isUpperCase()是否是大写字母")]),a._v(" "),t("li",[a._v("isLowerCase()是否是小写字母")]),a._v(" "),t("li",[a._v("toUpperCase()指定字母的大写形式")]),a._v(" "),t("li",[a._v("toLowerCase指定字母的小写形式")]),a._v(" "),t("li",[a._v("toString() 返回字符的字符串形式，字符串的长度仅为1")])]),a._v(" "),t("h3",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[a._v("#")]),a._v(" String")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("matches() ; 正则表达式")])]),a._v(" "),t("li",[t("p",[a._v("charAt（）：传入一个int类型参数，返回指定位置的字符")])]),a._v(" "),t("li",[t("p",[a._v("String（）：构造器，生成一个String对象")])]),a._v(" "),t("li",[t("p",[a._v("compareTo（）与参数比较，相同返回0，小于返回-1，大于返回1")])]),a._v(" "),t("li",[t("p",[a._v("concat（）：将参数字符串连接到字符串串尾")])]),a._v(" "),t("li",[t("p",[a._v("contains():查找字符串中是否包含某字符")])]),a._v(" "),t("li",[t("p",[a._v("equals（）：字符串值比较")])]),a._v(" "),t("li",[t("p",[a._v("intern（）：返回对象的值（调用该方法时，返回值在常量池中）")])]),a._v(" "),t("li",[t("p",[a._v("length（）：返回字符串的长度")])]),a._v(" "),t("li",[t("p",[a._v("isEmpty（）：判断是否是空字符串")])]),a._v(" "),t("li",[t("p",[a._v("toLowerCase（）：将所有字符串转换为小写")])]),a._v(" "),t("li",[t("p",[a._v("toUpperCase（）：将字符串所有字符转换为大写")])]),a._v(" "),t("li",[t("p",[a._v("trim（）：返回字符串副本，忽略首部和尾部空白")])]),a._v(" "),t("li",[t("p",[a._v("equalsIgnoreCase()：与equals类似，忽略大小写")])]),a._v(" "),t("li",[t("p",[a._v("substring()：截取字符串")])]),a._v(" "),t("li",[t("p",[a._v("toCharArra（）：将字符串转换为字符数组")])]),a._v(" "),t("li",[t("p",[a._v("split（）：以指定字符分割字符串")])]),a._v(" "),t("li",[t("p",[a._v("getBytes（）：将字符串以字节数组返回")])])]),a._v(" "),t("h3",{attrs:{id:"stringbuffer和stringbuilder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stringbuffer和stringbuilder"}},[a._v("#")]),a._v(" StringBuffer和StringBuilder")]),a._v(" "),t("p",[a._v("append（）：在字符串后面添加字符，可以是大部分数据类型")]),a._v(" "),t("p",[a._v("charAt（）：传入一个int类型参数，返回指定位置的字符")]),a._v(" "),t("p",[a._v("delete（）：删除指定区间的字符")]),a._v(" "),t("p",[a._v("insert（）：在指定位置插入元素")]),a._v(" "),t("p",[a._v("setCharAt（）：替换指定位置字符，参数为char类型")]),a._v(" "),t("p",[a._v("reverse（）：字符串反转")]),a._v(" "),t("p",[a._v("replace（）：替换指定区间字符")]),a._v(" "),t("h3",{attrs:{id:"random"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random"}},[a._v("#")]),a._v(" Random")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Random（）：生成一个对象")])]),a._v(" "),t("li",[t("p",[a._v("nextInt（）：生成一个随机数，如果有参数则生成一个在0~参数之间的随机数")])]),a._v(" "),t("li",[t("p",[a._v("nextBoolean（）：生成一个随机的布尔值（true或false）")])]),a._v(" "),t("li",[t("p",[a._v("nextDouble（）：生成一个在0~1之间的小数")])]),a._v(" "),t("li",[t("p",[a._v("nextFloat（）：生成一个在0~1之间的小数")])]),a._v(" "),t("li",[t("p",[a._v("nextLong（）：生成一个随机的long型数")])])]),a._v(" "),t("h3",{attrs:{id:"date"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[a._v("#")]),a._v(" Date")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Date（）：无参数时创建当前时间，传入long类型参数时创建一个从1970年1月1日00:00：00到参数毫秒后的时间，该时间以后统称原点时间")])]),a._v(" "),t("li",[t("p",[a._v("getTime（）：获取当前时间距离原点时间的毫秒数")])]),a._v(" "),t("li",[t("p",[a._v("setTime（）：设置时间，参数为long类型，可以将时间设置为距原点时间参数毫秒后的时间")])]),a._v(" "),t("li",[t("p",[a._v("toLocaleString()：创建一个固定格式的对象，方便看懂，但是已经弃用")])])]),a._v(" "),t("h3",{attrs:{id:"simpledateformat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#simpledateformat"}},[a._v("#")]),a._v(" SimpleDateFormat")]),a._v(" "),t("ul",[t("li",[a._v("SimpleDateFormat（）：无参时创建一个使用默认的格式的对象，传入“yyyy-MM-dd HH：mm：ss”这种规定格式时创建一个规定格式的对象")]),a._v(" "),t("li",[a._v("format（）：传入一个date类型的参数，然后返回一个一个转换后的字符串")])]),a._v(" "),t("h3",{attrs:{id:"calendar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#calendar"}},[a._v("#")]),a._v(" Calendar")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("GregorianCalendar()：一般new对象时new的是该类的子类GregorianCalendar；")])]),a._v(" "),t("li",[t("p",[a._v("getInstance()：通过类名点该方法获取Calender对象")])]),a._v(" "),t("li",[t("p",[a._v("set（）：根据给定的参数设置年月日时分秒")])]),a._v(" "),t("li",[t("p",[a._v("get（）：参数为int类型，根据参数返回指定字段的值，比如参数为1返回年")])]),a._v(" "),t("li",[t("p",[a._v("getTime（）：返回一个Date类型的值（相当于Calander->Date")])]),a._v(" "),t("li",[t("p",[a._v("setTime():传入一个Date类型的变量，返回一个Calander值（相当于Date->Calander）")])]),a._v(" "),t("li",[t("p",[a._v("add（）：参数为指定字段（年月日等等，通过int或者Calander.XXX传入），另一个参数为改变的量，无返回值")])])])])}),[],!1,null,null,null);t.default=_.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{436:function(t,a,s){"use strict";s.r(a);var v=s(2),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),a("p",[t._v("接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。")]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("p",[t._v("一")]),t._v(" "),a("ul",[a("li",[t._v("接口不能用于实例化对象。")]),t._v(" "),a("li",[t._v("接口没有构造方法。")]),t._v(" "),a("li",[t._v("接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。")]),t._v(" "),a("li",[t._v("接口不能包含成员变量，除了 static 和 final 变量。")]),t._v(" "),a("li",[t._v("接口不是被类继承了，而是要被类实现。")]),t._v(" "),a("li",[t._v("接口支持多继承。")])]),t._v(" "),a("p",[t._v("二")]),t._v(" "),a("ul",[a("li",[t._v("接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 "),a("strong",[t._v("public abstract")]),t._v("（只能是 public abstract，其他修饰符都会报错）。")]),t._v(" "),a("li",[t._v("接口中可以含有变量，但是接口中的变量会被隐式的指定为 "),a("strong",[t._v("public static final")]),t._v(" 变量（并且只能是 public，用 private 修饰会报编译错误）。")]),t._v(" "),a("li",[t._v("接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。")])]),t._v(" "),a("h3",{attrs:{id:"声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明"}},[t._v("#")]),t._v(" 声明")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("可见度"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" 接口名称 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" 其他的接口名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明变量        ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象方法 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[t._v("#")]),t._v(" 规则")]),t._v(" "),a("p",[t._v("重写接口中声明的方法时，需要注意以下规则：")]),t._v(" "),a("ul",[a("li",[t._v("类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。")]),t._v(" "),a("li",[t._v("类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。")]),t._v(" "),a("li",[t._v("如果实现接口的类是抽象类，那么就没必要实现该接口的方法。")])]),t._v(" "),a("p",[t._v("在实现接口的时候，也要注意一些规则：")]),t._v(" "),a("ul",[a("li",[t._v("一个类可以同时实现多个接口。")]),t._v(" "),a("li",[t._v("一个类只能继承一个类，但是能实现多个接口。")]),t._v(" "),a("li",[t._v("一个接口能继承另一个接口，这和类之间的继承比较相似。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);